#!/usr/bin/env python3
"""
Script de configuration et d'installation du bot
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def install_dependencies():
    """Installer les d√©pendances Python"""
    print("üì¶ Installation des d√©pendances...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ D√©pendances install√©es avec succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation des d√©pendances: {e}")
        return False

def setup_environment():
    """Configurer l'environnement"""
    print("üîß Configuration de l'environnement...")
    
    # Cr√©er le fichier .env s'il n'existe pas
    if not os.path.exists('.env'):
        if os.path.exists('.env.example'):
            shutil.copy('.env.example', '.env')
            print("‚úÖ Fichier .env cr√©√© √† partir de .env.example")
            print("‚ö†Ô∏è  Veuillez modifier le fichier .env avec vos identifiants")
        else:
            print("‚ùå Fichier .env.example non trouv√©")
            return False
    else:
        print("‚úÖ Fichier .env existe d√©j√†")
    
    # Cr√©er le dossier de stockage local
    os.makedirs('local_storage', exist_ok=True)
    print("‚úÖ Dossier de stockage local cr√©√©")
    
    return True

def setup_firebase():
    """Configurer Firebase (optionnel)"""
    print("üî• Configuration Firebase...")
    print("‚ÑπÔ∏è  Firebase est d√©j√† configur√© avec les identifiants fournis")
    print("‚ÑπÔ∏è  Le bot utilisera le stockage local en cas de probl√®me avec Firebase")
    return True

def test_configuration():
    """Tester la configuration"""
    print("üß™ Test de la configuration...")
    
    try:
        from config import Config
        print(f"‚úÖ Configuration charg√©e: {len(Config.MONITORED_SPACES)} espaces surveill√©s")
        
        # Test des imports
        import requests
        import telegram
        import firebase_admin
        import schedule
        print("‚úÖ Tous les modules import√©s avec succ√®s")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def create_systemd_service():
    """Cr√©er un service systemd pour l'ex√©cution automatique"""
    print("üîß Cr√©ation du service systemd...")
    
    current_dir = os.getcwd()
    python_path = sys.executable
    
    service_content = f"""[Unit]
Description=eLearning Notifier Bot
After=network.target

[Service]
Type=simple
User={os.getenv('USER', 'root')}
WorkingDirectory={current_dir}
ExecStart={python_path} {current_dir}/run_bot.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""
    
    service_file = "/etc/systemd/system/elearning-bot.service"
    
    try:
        with open(service_file, 'w') as f:
            f.write(service_content)
        print(f"‚úÖ Service systemd cr√©√©: {service_file}")
        print("‚ÑπÔ∏è  Pour activer le service: sudo systemctl enable elearning-bot")
        print("‚ÑπÔ∏è  Pour d√©marrer le service: sudo systemctl start elearning-bot")
        return True
    except PermissionError:
        print("‚ö†Ô∏è  Permissions insuffisantes pour cr√©er le service systemd")
        print("‚ÑπÔ∏è  Vous pouvez cr√©er le service manuellement")
        return False

def main():
    """Fonction principale de configuration"""
    print("üöÄ Configuration du Bot eLearning Notifier")
    print("=" * 60)
    
    steps = [
        ("Installation des d√©pendances", install_dependencies),
        ("Configuration de l'environnement", setup_environment),
        ("Configuration Firebase", setup_firebase),
        ("Test de la configuration", test_configuration),
        ("Cr√©ation du service systemd", create_systemd_service)
    ]
    
    for step_name, step_func in steps:
        print(f"\nüìã {step_name}...")
        if not step_func():
            print(f"‚ùå √âchec de l'√©tape: {step_name}")
            sys.exit(1)
    
    print("\n" + "=" * 60)
    print("üéâ Configuration termin√©e avec succ√®s!")
    print("\nüìù Prochaines √©tapes:")
    print("1. Modifiez le fichier .env avec vos identifiants")
    print("2. Testez le bot avec: python run_bot.py")
    print("3. Pour l'ex√©cution automatique: sudo systemctl enable elearning-bot")

if __name__ == "__main__":
    main()