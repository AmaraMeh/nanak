GUIDE COMPLET DU BOT ELEARNING
==============================

1. Objectif
-----------
Surveiller en continu les espaces d'affichage (Moodle/eLearning) d'une liste de d√©partements et notifier automatiquement sur Telegram toute modification : ajouts de sections, activit√©s, ressources, fichiers, renommages et modifications de description.

2. Cycle de Vie
---------------
D√©marrage:
- V√©rifie si des snapshots de contenu existent d√©j√† (Firebase ou fallback local).
- Si aucun snapshot (premier lancement absolu): lance un BIG SCAN initial (inventaire complet) avec optionnel t√©l√©chargement des fichiers.
- Sinon: effectue une baseline silencieuse (aucune notification) pour permettre des diffs propres ensuite.
- Lance la boucle de polling Telegram (commandes) + planification p√©riodique (intervalle configurable).

Boucle de Scan:
- √Ä chaque intervalle (CHECK_INTERVAL_MINUTES): r√©cup√©ration du contenu actuel de chaque cours.
- D√©tection des changements vs dernier snapshot persistant (Firebase ou local).
- √âmission d'une notification concise listant les changements et classification par type.
- Mise √† jour du snapshot persistant et en m√©moire.
- Si aucun changement et SEND_NO_UPDATES_MESSAGE=true: envoi d'un message "Aucun nouveau changement".

3. Persistance
--------------
Provider: Firebase Firestore (par d√©faut) avec fallback local JSON.
Structure Firestore:
  courses/{course_id}/meta/current          -> snapshot courant (version + timestamp)
  courses/{course_id}/versions/vN           -> historique des versions (si COURSE_VERSIONING=ON)
  courses/{course_id}/changes/{auto_id}     -> logs de lots de changements (hash d√©duplication)
  courses/{course_id}/messages/{auto_id}    -> trace des message_id Telegram envoy√©s

Fallback Local (dossier local_storage/):
  course_<id>.json              -> snapshot
  changes_log_<id>_TS.json      -> logs de changements
  messages_<id>.json            -> historique messages
  changes_hashes.json           -> m√©moire de hash pour d√©dup

4. D√©tection de Changements
---------------------------
Types pris en charge:
- section_added / section_removed / section_renamed
- activity_added / activity_removed / activity_description_changed
- resource_added / resource_removed
- file_added (avec date de fichier) / file_removed
- Inventaire initial: existing_section / existing_activity / existing_resource / existing_file

Renommages:
- Bas√© sur similarit√© (difflib) entre anciens et nouveaux titres; si similaire au-dessus d'un seuil, d√©tect√© comme rename plut√¥t que remove+add.

5. Gestion des Fichiers
-----------------------
- T√©l√©chargement conditionnel: activ√© uniquement pendant un bigscan (initial ou manuel via /bigscan) pour r√©duire charge et co√ªts r√©seau.
- Stockage dans downloads/<course_id>/<section_slug>/.
- Nom de fichier: parentTitle_hash_nomOriginal pour √©viter collisions.
- Taille max par fichier: 50 MB.

6. Notifications Telegram
-------------------------
- Utilise Bot API (polling manuel).
- Splitting automatique des messages > ~3900 caract√®res.
- Inventaire initial: messages multi-part structur√©s (sections, activit√©s, ressources, fichiers) puis r√©sum√© global.
- Notifications incr√©mentales: liste num√©rot√©e avec emoji par type + date fichier si disponible.
- Message ID enregistr√© (cours, type notification) pour tra√ßabilit√©.

7. Commandes Cl√©s
-----------------
Voir COMMANDS_REFERENCE.txt pour liste compl√®te + exemples.
Cat√©gories: base, navigation, maintenance, temporal, historique, statistiques, shortcuts ID & nom.

8. Shortcuts D√©partement
------------------------
- Par ID: /d<ID> /dt<ID> /dy<ID> /d7<ID>
- Par nom (slug): /dep_<slug> + suffixes _today / _yesterday / _last7
Construction slug: minuscules, suppression mots vides (affichage, departement, de, du, des, d'), normalisation -> underscores.

9. Strat√©gie Anti-Flood
-----------------------
- Baseline silencieuse sur red√©marrages.
- D√©lai configurable entre messages stream (/delay).
- Grouping ou streaming initial (INITIAL_SCAN_MODE=grouped|separate).
- Pagination interne pour inline navigation.

10. Fallback & R√©silience
-------------------------
- Si Firebase indisponible: bascule automatique sur stockage local, indication dans /status (‚ö†Ô∏è(local)).
- Aucune commande /stopbot pour √©viter arr√™t involontaire; arr√™t via signal syst√®me (SIGINT/SIGTERM).

11. Param√®tres (env/Config)
---------------------------
CHECK_INTERVAL_MINUTES       -> Intervalle minutes entre scans (d√©faut 5)
INITIAL_SCAN_MODE            -> grouped | separate (pr√©sentation inventaire initial)
INITIAL_SCAN_DETAIL_LEVEL    -> full | summary (niveau d√©tail inventaire)
SEND_FILES_AS_DOCUMENTS      -> true|false (envoi fichiers apr√®s bigscan)
SEND_NO_UPDATES_MESSAGE      -> true|false (message cycle sans changement)
COURSE_VERSIONING            -> true|false (sauvegarde versions successives)
DB_PROVIDER                  -> firebase | supabase (supabase placeholder)

12. Statistiques & Monitoring
-----------------------------
/statuts (√©tat), /stats (ASCII summary), /uptime (nombre de scans).
Monitor collecte: total_scans, notifications, erreurs r√©centes, r√©ussite/√©chec par cours.

13. Historique & Temporalit√©
----------------------------
/today /yesterday /last7 : r√©sum√©s additions r√©centes.
/week : histogramme des types sur 7 jours.
/digest : digest quotidien additions/renommages.
/latest : 30 derniers ajouts/renommages tri√©s par timestamp.
Filtrage post-premier scan pour √©viter bruit de l'inventaire initial.

14. Architecture Code
---------------------
main.py               -> Orchestration (planification, baseline/big scan, statut)
telegram_notifier.py  -> Commandes + envoi notifications + splitting
change_detector.py    -> Diff logique (ajouts/retraits/renommages)
firebase_manager.py   -> Persistance structur√©e + fallback local + logs
monitoring.py         -> Agr√©gation stats cycle
config.py             -> Param√®tres et liste MONITORED_SPACES

15. Ajout d'un Nouveau D√©partement
----------------------------------
- Ajouter un objet {name, url, id} dans Config.MONITORED_SPACES.
- Red√©marrer le bot: baseline (ou bigscan si tout premier run global) inclura ce cours.
- Commandes dynamiques ID et slug g√©n√©r√©es automatiquement.

16. S√©curit√© & Bonnes Pratiques
-------------------------------
- Conserver les secrets (TOKEN, credentials Firebase) hors d√©p√¥t public.
- Limiter l'exposition des fichiers t√©l√©charg√©s (pas de distribution externe non contr√¥l√©e).
- Nettoyage p√©riodique possible des anciens logs et versions (√† impl√©menter: pruning).

17. Limitations Actuelles
-------------------------
- get_changes_since Firebase: retrieval simplifi√© (am√©lioration possible via requ√™tes sous-collection changes).
- Pas d'auth pour endpoints web (si FastAPI activ√©) -> ajouter un token simple.
- Pas de test unitaire fourni (suggestion: int√©grer pytest pour le diff engine).
- Pas encore de cooldown sur /bigscan (peut √™tre ajout√©: variable d'environnement BIGSCAN_COOLDOWN_MINUTES).

18. Extension Future (Roadmap Indicative)
----------------------------------------
- Commande /msgids <id> pour lister messages envoy√©s li√©s √† un cours.
- Pruning automatique des versions > N.
- Export CSV/Excel des changements r√©cents.
- Int√©gration Supabase (DB_PROVIDER=supabase) compl√®te.
- Web dashboard (FastAPI + templates) pour visualisation historique.

19. D√©pannage Rapide
--------------------
Sympt√¥me: "Aucun contenu r√©cup√©r√©" -> v√©rifier credentials eLearning et accessibilit√© r√©seau.
Sympt√¥me: Messages "localement" au lieu de Firebase -> v√©rifier GOOGLE_APPLICATION_CREDENTIALS ou projectId.
Sympt√¥me: Pas de notifications apr√®s ajout r√©el -> v√©rifier intervalle, logs diff (hash d√©dup possible si contenu identique), red√©marrer avec /bigscan pour r√©initialiser r√©f√©rence.
Sympt√¥me: Erreur parse HTML Telegram -> fallback auto en texte brut (voir logs).

20. Exemples de Flux
--------------------
Premier d√©ploiement:
1. Lancement -> Startup message
2. Big scan initial -> Inventaire multi-messages + r√©sum√© global
3. Toutes les 5 min -> scans incr√©mentaux -> notifications

Ajout fichier nouveau:
- Diff d√©tecte file_added (avec date) -> notification inclut horodatage.

Renommage section:
- Diff d√©tecte section_renamed -> notification avec emoji üîÅ.

21. Glossaire
-------------
Snapshot: √©tat complet actuel d'un cours.
Baseline silencieuse: capture initiale sans notifications.
Bigscan: inventaire complet envoy√© avec d√©tails.
Diff incr√©mental: liste des changements entre deux snapshots.

22. Support & Logs
------------------
Consulter bot.log pour diagnostics (erreurs Firebase, parse, envois Telegram).
Changer niveau log en modifiant logging.basicConfig dans main.py si besoin (DEBUG).

Fin du guide.
